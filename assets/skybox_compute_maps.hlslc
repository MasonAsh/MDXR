#define NO_COMMON_RESOURCES
#include "common.hlsli"
#include "pbr.hlsli"

#define BLOCK_SIZE 8
#define THREADS_PER_PIXEL 16
#define SAMPLES_PER_PIXEL 1024
#define SAMPLES_PER_THREAD ((float)SAMPLES_PER_PIXEL / (float)THREADS_PER_PIXEL)

cbuffer Constants : register(b0) {
    uint g_SkyboxSrvIdx;
    uint g_OutTextureUavIdx;
    uint g_FaceIndex;
    float g_IsDiffuse; // 0.0 for prefilter map, 1.0 for diffuse irradiance
    float g_Roughness;
    float2 g_TexelSize;
};

struct ComputeShaderInput {
    uint3 groupID : SV_GroupID;
    uint3 groupThreadID : SV_GroupThreadID;
    uint3 dispatchThreadID : SV_DispatchThreadID;
    uint groupIndex : SV_GroupIndex;
};

struct MicrofacetDistributionSample
{
    float pdf;
    float cosTheta;
    float sinTheta;
    float phi;
};

groupshared float4 g_IrradianceAccumulators[BLOCK_SIZE * BLOCK_SIZE * THREADS_PER_PIXEL];

TextureCube GetSkyboxTexture()
{
    return ResourceDescriptorHeap[g_SkyboxSrvIdx];
}

RWTexture2DArray<float4> GetOutTexture()
{
    return ResourceDescriptorHeap[g_OutTextureUavIdx];
}

float3 ConvertCubeUVToXYZ(uint index, float2 uv)
{
    float uc = 2.0f * uv.x - 1.0f;
    float vc = 2.0f * uv.y - 1.0f;
    switch (index)
    {
    case 0: // Left
        return float3(1.0f, -vc, -uc);
    case 1: // Right
        return float3(-1.0f, -vc, uc);
    case 2: // Top
        return float3(uc, 1.0f, vc);
    case 3: // Bottom
        return float3(uc, -1.0f, -vc);
    case 4: // Front
        return float3(uc, -vc, 1.0f);
    case 5: // Back
    default: 
        return float3(-uc, -vc, -1.0f);
    };
}

// http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html
float2 Hammersley(uint i, uint N) 
{
    float ri = reversebits(i) * 2.3283064365386963e-10f;
    return float2(float(i) / float(N), ri);
}

MicrofacetDistributionSample SampleGGX(float2 xi, float roughness)
{
    MicrofacetDistributionSample mds;
    
    float a = roughness * roughness;
    mds.cosTheta = saturate(sqrt((1.0 - xi.y) / (1.0 + (a * a - 1.0) * xi.y)));
    mds.sinTheta = sqrt(1.0 - mds.cosTheta * mds.cosTheta);
    mds.phi = 2.0 * PI * xi.x;

    mds.pdf = DistributionGGX(mds.cosTheta, roughness);

    mds.pdf /= 4.0;

    return mds;
}

MicrofacetDistributionSample SampleLambertian(float2 xi)
{
    MicrofacetDistributionSample mds;
    
    mds.cosTheta = sqrt(1.0 - xi.y);
    mds.sinTheta = sqrt(xi.y);
    mds.phi = 2.0 * PI * xi.x;
    
    mds.pdf = mds.cosTheta / PI;

    return mds;
}

float3 ImportanceSampleGGX(float2 Xi, float3x3 TBN, float roughness)
{
    float a = roughness * roughness;

    float phi = 2 * PI * Xi.x;
    float cosTheta = sqrt((1 - Xi.y) / (1 + (a*a - 1) * Xi.y));
    float sinTheta = sqrt(1 - cosTheta * cosTheta);

    float3 H;
    H.x = sinTheta * cos(phi);
    H.y = sinTheta * sin(phi);
    H.z = cosTheta;

    return mul(H, TBN);
}

float3 ImportanceSampleDiffuse(float2 Xi, float3x3 TBN)
{
    float phi = 2 * PI * Xi.x;
    float cosTheta = 1.0f - Xi.y;
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    float3 H;
    H.x = sinTheta * cos(phi);
    H.y = sinTheta * sin(phi);
    H.z = cosTheta;

    return mul(H, TBN);
}

float3 ImportanceSample(float2 xi, float3x3 TBN, float roughness, out float pdf)
{
    MicrofacetDistributionSample mds;

    if (g_IsDiffuse) {
        mds = SampleLambertian(xi);
    } else {
        mds = SampleGGX(xi, roughness);
    }

    pdf = mds.pdf;

    float3 H;
    H.x = mds.sinTheta * cos(mds.phi);
    H.y = mds.sinTheta * sin(mds.phi);
    H.z = mds.cosTheta;
    H = normalize(H);

    return mul(H, TBN);
}

float3 AdjustSkyboxColor(float3 color)
{
    //const float environmentScale = 3.14;
    const float environmentScale = 1.0f;
    float luma = max(0.000000001, max_float3(color));
    float3 result = color;
    //result *= 1.0 - max(0.0, luma) / luma;
    return result * environmentScale;
}

[numthreads(BLOCK_SIZE, BLOCK_SIZE, THREADS_PER_PIXEL)]
void CSMain(ComputeShaderInput input)
{
    TextureCube skybox = GetSkyboxTexture();
    RWTexture2DArray<float4> outTexture = GetOutTexture();

    float2 texelSize = g_TexelSize;
    float2 outUV = texelSize * input.dispatchThreadID.xy;
    uint3 groupThreadID = input.groupThreadID;

    float3 N = normalize(ConvertCubeUVToXYZ(g_FaceIndex, outUV));
    N.x *= -1;
    float3 R = N;
    float3 V = N;

    float3 up = abs(N.z) < 0.999 ? float3(0,0,1) : float3(1,0,0);
    float3 tangentX = normalize(cross(up, N));
    float3 tangentY = normalize(cross(N, tangentX));

    float4 irradiance = (float4)0.0f;
    uint startSample = groupThreadID.z * SAMPLES_PER_THREAD;
    uint endSample = (groupThreadID.z + 1) * SAMPLES_PER_THREAD;

    float2 dimensions;
    skybox.GetDimensions(dimensions.x, dimensions.y);

    float sampleCount = 0;

    float3x3 tangentToWorld = float3x3(
        tangentX,
        tangentY,
        N
    );

    for (uint i = startSample; i < endSample; i += 1) {
        float2 Xi = Hammersley(i, SAMPLES_PER_PIXEL);

        float pdf;
        float3 H = ImportanceSample(Xi, tangentToWorld, g_Roughness, pdf);

        float mip = 0.5 * log2(6.0 * float(dimensions.x) * float(dimensions.x) / (float(SAMPLES_PER_PIXEL) * pdf));

        if (g_IsDiffuse) {
            float3 skySample = skybox.SampleLevel(g_sampler, H, mip).rgb;
            irradiance.rgb += skySample;
            irradiance.w += 1;
        } else {
            float3 L  = normalize(reflect(-V, H));
            float NdotL = dot(N, L);
            if (NdotL > 0.0) {

                if (g_Roughness == 0.0) {
                    mip = 0;
                }

                float3 skySample = skybox.SampleLevel(g_sampler, L, mip).rgb;

                irradiance.rgb += skySample * NdotL;
                irradiance.w += NdotL;
            }
        }
    }

    g_IrradianceAccumulators[input.groupIndex] = irradiance;

    GroupMemoryBarrierWithGroupSync();

    if (groupThreadID.z == 0) {
        float4 finalColor = float4(0, 0, 0, 0);
        float totalWeight = 0.0f;
        for (float i = 0; i < THREADS_PER_PIXEL; i += 1) {
            float4 irradiance = g_IrradianceAccumulators[input.groupIndex + (i * BLOCK_SIZE * BLOCK_SIZE)];
            finalColor.xyz += irradiance.rgb;
            totalWeight += irradiance.a;
        }
        finalColor.rgb = finalColor.rgb / totalWeight;
        finalColor.a = 1.0f;

        float3 uv = float3(input.dispatchThreadID.xy, (float)g_FaceIndex);
        outTexture[uv] = finalColor;
    }
}